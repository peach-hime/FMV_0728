@page "/"
@inherits LayoutComponentBase
@inject IJSRuntime JSRuntime
@inject ILocalStorageService localStorage
@inject StateContainer stateContainer
@inject IConfiguration render
@inject IStringLocalizer<Localization.SharedResource> Loc

<PageTitle>@ReturnTitle()</PageTitle>

@if (stateContainer.showModal)
{
    <About OnClick="ModalClose"></About>
}
@if (stateContainer.showColorPicker)
{
    <ColorSelect OnClose="ModalClose"></ColorSelect>
}
@if (stateContainer.showFMIPopup)
{
    <FMIPopup OnClose="ModalClose"></FMIPopup>
}
<MenuBar refreshParent="refreshParent" onInputFileChange="OnInputFileChange" fileIsLoaded="FileIsLoaded" />
<SideBar refreshParent="refreshParent" newFunction="NewFunction" nextFn="NextFn" />
<div id="mainWindow" class="main" @onkeydown=NextFn tabindex="0">
    @if (stateContainer.spreadsheetVisible > 0)
    {
        <div class="main-visualiser @(stateContainer.spreadsheetVisible==1?"main-half":"")">
            <Spreadsheet @ref="spreadsheet" refreshParent="refreshParent"></Spreadsheet>
        </div>
    }
    @if (stateContainer.spreadsheetVisible != 2)
    {
        <div class="main-visualiser @(stateContainer.spreadsheetVisible==1?"main-half":"")" touch-action=@stateContainer.touchAction>
            @if (stateContainer.inputDropStatus == "file-input-zone-drop")
            {
                <div class="file-input-zone-drop"><InputFile OnChange="OnInputFileChange" single accept=".xfmv" title=@Loc["OPEN_TOOLTIP"] /></div>
            }
            <svg id="canvas_1" viewBox="0 0 @stateContainer.viewWidth @stateContainer.viewHeight" width=@stateContainer.canvasWidth height=@stateContainer.canvasHeight xmlns="http://www.w3.org/2000/svg">
                <defs>
                    <style type="text/css">
                        @@import url("https://fonts.googleapis.com/css2?family=PT+Sans+Caption")
                    </style>
                    <radialGradient id="selected-fill" cx="50%" cy="50%" r="50%" fx="50%" fy="50%">
                        <stop offset="0%" style="stop-color:@render[$"{stateContainer.newFnStyle}:selected-fill"];stop-opacity:0.75" />
                        <stop offset="75%" style="stop-color:@render[$"{stateContainer.newFnStyle}:selected-fill"];stop-opacity:0.5" />
                        <stop offset="100%" style="stop-color:@render[$"{stateContainer.newFnStyle}:selected-fill"];stop-opacity:0" />
                    </radialGradient>
                    <radialGradient id="exit-fill" cx="50%" cy="50%" r="50%" fx="50%" fy="50%">
                        <stop offset="0%" style="stop-color:@render[$"{stateContainer.newFnStyle}:exit-fill"];stop-opacity:1" />
                        <stop offset="75%" style="stop-color:@render[$"{stateContainer.newFnStyle}:exit-fill"];stop-opacity:0.75" />
                        <stop offset="100%" style="stop-color:@render[$"{stateContainer.newFnStyle}:exit-fill"];stop-opacity:0" />
                    </radialGradient>
                    <radialGradient id="group-fill" cx="50%" cy="50%" r="50%" fx="50%" fy="50%">
                        <stop offset="0%" style="stop-color:@render[$"{stateContainer.newFnStyle}:group-fill"];stop-opacity:0.75" />
                        <stop offset="75%" style="stop-color:@render[$"{stateContainer.newFnStyle}:group-fill"];stop-opacity:0.5" />
                        <stop offset="100%" style="stop-color:@render[$"{stateContainer.newFnStyle}:group-fill"];stop-opacity:0" />
                    </radialGradient>
                    <radialGradient id="entry-fill" cx="50%" cy="50%" r="50%" fx="50%" fy="50%">
                        <stop offset="0%" style="stop-color:@render[$"{stateContainer.newFnStyle}:entry-fill"];stop-opacity:1" />
                        <stop offset="75%" style="stop-color:@render[$"{stateContainer.newFnStyle}:entry-fill"];stop-opacity:0.75" />
                        <stop offset="100%" style="stop-color:@render[$"{stateContainer.newFnStyle}:entry-fill"];stop-opacity:0" />
                    </radialGradient>
                    <radialGradient id="background-fill" cx="50%" cy="50%" r="50%" fx="50%" fy="50%">
                        <stop offset="0%" style="stop-color:@render[$"{stateContainer.newFnStyle}:background-fill"];stop-opacity:1" />
                        <stop offset="75%" style="stop-color:@render[$"{stateContainer.newFnStyle}:background-fill"];stop-opacity:0.75" />
                        <stop offset="100%" style="stop-color:@render[$"{stateContainer.newFnStyle}:background-fill"];stop-opacity:0" />
                    </radialGradient>
                    <radialGradient id="parent-fill" cx="50%" cy="50%" r="50%" fx="50%" fy="50%">
                        <stop offset="0%" style="stop-color:@render[$"{stateContainer.newFnStyle}:parent-fill"];stop-opacity:0.75" />
                        <stop offset="75%" style="stop-color:@render[$"{stateContainer.newFnStyle}:parent-fill"];stop-opacity:0.5" />
                        <stop offset="100%" style="stop-color:@render[$"{stateContainer.newFnStyle}:parent-fill"];stop-opacity:0" />
                    </radialGradient>
                    <radialGradient id="hold-fill" cx="50%" cy="50%" r="50%" fx="50%" fy="50%">
                        <stop offset="0%" style="stop-color:@render[$"{stateContainer.newFnStyle}:hold-fill"];stop-opacity:1" />
                        <stop offset="75%" style="stop-color:@render[$"{stateContainer.newFnStyle}:hold-fill"];stop-opacity:0.75" />
                        <stop offset="100%" style="stop-color:@render[$"{stateContainer.newFnStyle}:hold-fill"];stop-opacity:0" />
                    </radialGradient>
                </defs>
                @if (stateContainer.fileLoaded)
                {
                    <g @onclick="UnSelect">
                        <rect fill=@render[$"{stateContainer.newFnStyle}:canvas-color"] opacity=@render[$"{stateContainer.newFnStyle}:canvas-opacity"] width="100%" height="100%" />
                    </g>
                    foreach (Coupling coupling in stateContainer.couplingList.FindAll(x => x.outputFn != stateContainer.selectedFn && x.toFn != stateContainer.selectedFn && x.Name != stateContainer.selectedLabel))
                    {
                        <CouplingDisplay coupling=@coupling refreshParent="refreshParent" />
                    }
                    foreach (Function function in stateContainer.functionList.FindAll(x => x.IDNr != stateContainer.selectedFn))
                    {
                        <FunctionDisplay function=@function refreshParent="refreshParent" />
                    }
                    if (stateContainer.selectedCoupling is not null)
                    {
                        <CouplingDisplay coupling=@stateContainer.selectedCoupling refreshParent="refreshParent" />
                    }
                    if (stateContainer.selectedFunction is not null)
                    {
                        <FunctionDisplay function=@stateContainer.selectedFunction refreshParent="refreshParent" />
                    }
                }
            </svg>
            <p>
                @stateContainer.debugOutput
            </p>
        </div>
    }
</div>

@code {
    public int maxFn = -1;
    public double newFnX = -40;
    public double newFnY = 0;
    public bool isNewModel = true;
    protected Spreadsheet? spreadsheet;
    private static Func<string, string, Task>? UpdateFileContent;
    //protected IEnumerable<Claim> _claims = Enumerable.Empty<Claim>(); //private string[] returnClaims = { "idp", "name", "oid" };

    private string ReturnTitle()
    {
        if (stateContainer.fileName != "" && stateContainer.fileName != "FMV_new.xfmv")
        {
            return $"FRAM Model Visualiser - {stateContainer.fileName.Replace(".xfmv", "")}";
        }
        else
        {
            return "FRAM Model Visualiser";
        }
    }
    private void refreshParent()
    {
        StateHasChanged();
        //if (spreadsheet is not null)
        //{
        //    await spreadsheet.UpdateState();
        //}
    }
    private void ModalClose(bool state)
    {
        stateContainer.showModal = state;
        stateContainer.showColorPicker = state;
        stateContainer.showFMIPopup = state;
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            FocusElement("openFileBtn");
            UpdateFileContent = OpenFileContent;
            var content = await JSRuntime.InvokeAsync<string>("fileOpenAs");
            if (content != "waiting")
            {
                stateContainer.selectedFn = "-1";
                await Restore();
            }
            //await GetClaimsPrincipalData(); //
        }
        else
        {
            try
            {
                await localStorage.SetItemAsync("backupData", stateContainer.projectData_Undo[0].OuterXml);
                await localStorage.SetItemAsync("backupFileName", stateContainer.fileName);
            }
            catch
            {

            }
        }
    }
    //private async Task GetClaimsPrincipalData()
    //{
    // Gets an AuthenticationState that describes the current user.
    //@inject AuthenticationStateProvider AuthStateProvider
    //var authState = await AuthStateProvider.GetAuthenticationStateAsync();
    //var user = authState.User;
    // Checks if the user has been authenticated.
    //if (user.Identity is not null && user.Identity.IsAuthenticated)
    //{
    //    Console.WriteLine($"{user.Identity.Name} is authenticated.");
    // The claims mentioned in returnClaims variable are selected only.
    //_claims = user.Claims; //.Where(x => returnClaims.Contains(x.Type));
    //}
    //}

    [JSInvokable]  //gets called by js if opened with file content
    public static async Task FileContent(string content, string name)
    {
        try
        {
            if (UpdateFileContent is not null)
            {
                await UpdateFileContent.Invoke(content, name);
            }
        }
        catch
        {

        }
    }
    private async Task OpenFileContent(string content, string name)
    {
        if (content.Length > 0 && name.Length > 0)
        {
            stateContainer.debugOutput = "File loading ...";
            stateContainer.fileLoaded = false;
            stateContainer.viewWidth = 0;
            stateContainer.viewHeight = 0;
            stateContainer.undoIndex = 0;
            stateContainer.projectData_Undo = new XmlDocument[stateContainer.undoLength];
            stateContainer.projectData_Undo[0] = new XmlDocument();
            stateContainer.projectData_Undo[0].LoadXml(content);
            stateContainer.fileName = name;
            stateContainer.inputDropStatus = "file-input-zone-hide";
            FileIsLoaded();
            StateHasChanged();
        }
        else
        {
            stateContainer.selectedFn = "-1";
            await Restore();
        }
    }
    private void NewFunction()
    {
        if (stateContainer.selectedFn != "-1" && stateContainer.selectedFunction?.IDName == "")
        {
            stateContainer.defaultFnLabel();
        }
        if (stateContainer.projectData_Undo[0] == null)
        {
            stateContainer.fileLoaded = false;
            stateContainer.tempZoomA = 1;
            stateContainer.tempZoomF = 1;
            stateContainer.scaleZoom = 1.5;
            stateContainer.projectData_Undo[0] = new XmlDocument();
            stateContainer.projectData_Undo[0].LoadXml("<FM Version=\"0,3,0,0\"><Functions></Functions><Aspects scaleFunction=\"1\" scaleAspect=\"1\" scaleZoom=\"1.5\" Enhanced=\"true\"></Aspects></FM>");
            stateContainer.inputDropStatus = "file-input-zone-hide";
            stateContainer.fileLoaded = true;
        }
        else
        {
            stateContainer.updateUndo();
        }
        maxFn++;
        if (isNewModel)
        {
            stateContainer.fileLoaded = false;
            stateContainer.inputDropStatus = "file-input-zone-hide";
            stateContainer.fileLoaded = true;
            if (maxFn % 2 == 0)
            {
                if (maxFn % 8 == 0 && maxFn != 0) { newFnX = 50; newFnY += 240; }
                else { newFnX += 90; newFnY += 110; }
            }
            else
            {
                newFnX += 110;
                newFnY -= 90;
            }
        }
        else
        {
            if (stateContainer.selectedFn == "-1" || stateContainer.selectedFunction is null)
            {
                newFnX = 20;
                newFnY = 20;
            }
            else
            {
                newFnX = stateContainer.selectedFunction.x + 90;
                newFnY = stateContainer.selectedFunction.y + 110;
            }
        }
        stateContainer.viewWidth = Math.Max(stateContainer.viewWidth, newFnX + 120);
        stateContainer.viewHeight = Math.Max(stateContainer.viewHeight, newFnY + 120);
        stateContainer.canvasWidth = stateContainer.viewWidth * stateContainer.scaleZoom;
        stateContainer.canvasHeight = stateContainer.viewHeight * stateContainer.scaleZoom;

        XmlNode itemF = stateContainer.projectData_Undo[0].CreateElement("Function");
        XmlAttribute fnStyle = stateContainer.projectData_Undo[0].CreateAttribute("fnStyle");
        fnStyle.Value = stateContainer.newFnStyle.ToString();
        itemF.Attributes!.Append(fnStyle);
        XmlAttribute isInput = stateContainer.projectData_Undo[0].CreateAttribute("isInput");
        isInput.Value = "false";
        itemF.Attributes.Append(isInput);
        XmlAttribute orphans = stateContainer.projectData_Undo[0].CreateAttribute("orphans");
        orphans.Value = "0";
        itemF.Attributes.Append(orphans);
        XmlNode IDNr = stateContainer.projectData_Undo[0].CreateElement("IDNr");
        IDNr.InnerText = maxFn.ToString();
        itemF.AppendChild(IDNr);
        XmlNode FunctionType = stateContainer.projectData_Undo[0].CreateElement("FunctionType");
        FunctionType.InnerText = "2";
        itemF.AppendChild(FunctionType);
        XmlNode IDName = stateContainer.projectData_Undo[0].CreateElement("IDName");
        IDName.InnerText = "";
        itemF.AppendChild(IDName);
        XmlAttribute profileFn = stateContainer.projectData_Undo[0].CreateAttribute("profileFn");
        profileFn.Value = "";
        itemF.Attributes.Append(profileFn);
        XmlAttribute profileI = stateContainer.projectData_Undo[0].CreateAttribute("profileI");
        profileI.Value = "";
        itemF.Attributes.Append(profileI);
        XmlAttribute profileP = stateContainer.projectData_Undo[0].CreateAttribute("profileP");
        profileP.Value = "";
        itemF.Attributes.Append(profileP);
        XmlAttribute profileR = stateContainer.projectData_Undo[0].CreateAttribute("profileR");
        profileR.Value = "";
        itemF.Attributes.Append(profileR);
        XmlAttribute profileC = stateContainer.projectData_Undo[0].CreateAttribute("profileC");
        profileC.Value = "";
        itemF.Attributes.Append(profileC);
        XmlAttribute profileT = stateContainer.projectData_Undo[0].CreateAttribute("profileT");
        profileT.Value = "";
        itemF.Attributes.Append(profileT);
        //if (selectedFn>-1) {selectGroupChildren(false);}
        stateContainer.isDisabled = false;
        stateContainer.selectedLabel = "";
        XmlAttribute fnX = stateContainer.projectData_Undo[0].CreateAttribute("x");
        XmlAttribute fnY = stateContainer.projectData_Undo[0].CreateAttribute("y");
        fnX.Value = newFnX.ToString();
        fnY.Value = newFnY.ToString();
        itemF.Attributes.Append(fnX);
        itemF.Attributes.Append(fnY);
        stateContainer.projectData_Undo[0].SelectSingleNode("//FM/Functions")!.AppendChild(itemF);
        stateContainer.functionList.Add(new Function(itemF));
        stateContainer.selectedFn = maxFn.ToString();
        stateContainer.fnName = "";
        FocusElement("fnNameText");
        ClearElement("fnNameText");
    }
    private async Task OnInputFileChange(InputFileChangeEventArgs e)
    {
        stateContainer.debugOutput = "File loading ...";
        stateContainer.fileLoaded = false;
        stateContainer.viewWidth = 0;
        stateContainer.viewHeight = 0;
        var buffer = new byte[e.File.Size];
        await e.File.OpenReadStream(1050000).ReadAsync(buffer);
        stateContainer.undoIndex = 0;
        stateContainer.projectData_Undo = new XmlDocument[stateContainer.undoLength];
        stateContainer.projectData_Undo[0] = new XmlDocument();
        stateContainer.projectData_Undo[0].LoadXml(Encoding.UTF8.GetString(buffer));
        stateContainer.fileName = e.File.Name;
        stateContainer.inputDropStatus = "file-input-zone-hide";
        FileIsLoaded();
    }
    private void FileIsLoaded()
    {
        stateContainer.selectedFn = "-1";
        stateContainer.fnName = "";
        stateContainer.isDisabled = true;
        stateContainer.aspectsList = new List<Aspect>();
        stateContainer.outputsList = new List<Aspect>();
        stateContainer.couplingList = new List<Coupling>();
        stateContainer.functionList = new List<Function>();
        maxFn = -1;
        var getFns = stateContainer.projectData_Undo[0].SelectNodes("//FM/Functions/Function");
        if (getFns != null)
        {
            var updateFnStyle = false;
            stateContainer.newFnStyle = int.Parse(getFns[0]?.Attributes?["fnStyle"]?.Value ?? "0");
            if (render[$"{stateContainer.newFnStyle}:Name"] == null)
            {
                stateContainer.newFnStyle = 0;
                updateFnStyle = true;
            }
            foreach (XmlNode fn in getFns)
            {
                //update fnStyle if the style index is not present in the current renderoptions.json, as caught in the check above
                if (updateFnStyle)
                {
                    fn.SelectSingleNode("@fnStyle")!.Value = "0";
                }
                //this is for modern background functions to indicate which side to place the aspect circle, Input (left) or Output (right)
                if (fn.SelectSingleNode("@orphans") == null)
                {
                    fn.Attributes!.Append(stateContainer.projectData_Undo[0].CreateAttribute("orphans"));
                }
                fn.SelectSingleNode("@orphans")!.Value = "0";
                XmlAttribute isInput = stateContainer.projectData_Undo[0].CreateAttribute("isInput");
                if (stateContainer.projectData_Undo[0].SelectNodes($"//FM/Inputs/Input[FunctionIDNr=\"{fn.SelectSingleNode("IDNr")?.InnerText}\"]")?.Count != 0)
                {
                    isInput.Value = "true";
                    fn.Attributes!.Append(isInput);
                }
                else
                {
                    isInput.Value = "false";
                    fn.Attributes!.Append(isInput);
                }
                if (fn.SelectSingleNode("@profileFn") == null)
                {
                    fn.Attributes!.Append(stateContainer.projectData_Undo[0].CreateAttribute("profileFn"));
                }
                if (fn.SelectSingleNode("@profileI") == null)
                {
                    fn.Attributes!.Append(stateContainer.projectData_Undo[0].CreateAttribute("profileI"));
                }
                if (fn.SelectSingleNode("@profileP") == null)
                {
                    fn.Attributes!.Append(stateContainer.projectData_Undo[0].CreateAttribute("profileP"));
                }
                if (fn.SelectSingleNode("@profileR") == null)
                {
                    fn.Attributes!.Append(stateContainer.projectData_Undo[0].CreateAttribute("profileR"));
                }
                if (fn.SelectSingleNode("@profileC") == null)
                {
                    fn.Attributes!.Append(stateContainer.projectData_Undo[0].CreateAttribute("profileC"));
                }
                if (fn.SelectSingleNode("@profileT") == null)
                {
                    fn.Attributes!.Append(stateContainer.projectData_Undo[0].CreateAttribute("profileT"));
                }
                //as the Functions are read from the loaded file, add them to the functionList
                maxFn = Math.Max(maxFn, int.Parse(fn.SelectSingleNode("IDNr")?.InnerText ?? "0"));
                stateContainer.functionList.Add(new Function(fn));
                var _x = fn.SelectSingleNode("@x")?.Value ?? "50";
                if (_x == "")
                {
                    _x = "50";
                    fn.SelectSingleNode("@x")!.Value = "50";
                }
                var _y = fn.SelectSingleNode("@y")?.Value ?? "50";
                if (_y == "")
                {
                    _y = "50";
                    fn.SelectSingleNode("@y")!.Value = "50";
                }
                stateContainer.viewWidth = Math.Max(stateContainer.viewWidth, double.Parse(_x) + 120);
                stateContainer.viewHeight = Math.Max(stateContainer.viewHeight, double.Parse(_y) + 120);
            }
        }
        if (stateContainer.projectData_Undo[0].SelectSingleNode("//FM/Aspects") == null)
        {
            stateContainer.projectData_Undo[0].SelectSingleNode("//FM")!.AppendChild(stateContainer.projectData_Undo[0].CreateElement("Aspects"));
        }
        XmlNode aspectsA = stateContainer.projectData_Undo[0].SelectSingleNode("//FM/Aspects")!;
        if (aspectsA.SelectSingleNode("@scaleFunction") == null)
        {
            XmlAttribute scaleF = stateContainer.projectData_Undo[0].CreateAttribute("scaleFunction");
            scaleF.Value = "1";
            aspectsA.Attributes!.Append(scaleF);
        }
        if (aspectsA.SelectSingleNode("@scaleAspect") == null)
        {
            XmlAttribute scaleA = stateContainer.projectData_Undo[0].CreateAttribute("scaleAspect");
            scaleA.Value = "1";
            aspectsA.Attributes!.Append(scaleA);
        }
        if (aspectsA.SelectSingleNode("@scaleZoom") == null)
        {
            XmlAttribute scaleZ = stateContainer.projectData_Undo[0].CreateAttribute("scaleZoom");
            scaleZ.Value = "1";
            aspectsA.Attributes!.Append(scaleZ);
        }
        if (aspectsA.SelectSingleNode("@Enhanced") == null)
        {
            XmlAttribute enhanced = stateContainer.projectData_Undo[0].CreateAttribute("Enhanced");
            enhanced.Value = "false";
            aspectsA.Attributes!.Append(enhanced);
        }
        if (aspectsA.SelectSingleNode("@WebEnhanced") == null)
        {
            XmlAttribute webenhanced = stateContainer.projectData_Undo[0].CreateAttribute("WebEnhanced");
            webenhanced.Value = "false";
            aspectsA.Attributes!.Append(webenhanced);
        }
        int idCount = 0;
        foreach (XmlNode itemI in stateContainer.projectData_Undo[0].SelectNodes("//FM/Inputs/Input")!)
        {
            if (itemI.SelectSingleNode("IDNr")?.InnerText != idCount.ToString())
            {
                itemI.SelectSingleNode("IDNr")!.InnerText = idCount.ToString();
            }
            if (itemI.SelectSingleNode("@orphan") == null)
            {
                itemI.Attributes!.Append(stateContainer.projectData_Undo[0].CreateAttribute("orphan"));
            }
            itemI.SelectSingleNode("@orphan")!.Value = "true";
            stateContainer.aspectsList.Add(new Aspect("Input", idCount.ToString(), "true", itemI.SelectSingleNode("IDName")?.InnerText ?? "", itemI.SelectSingleNode("FunctionIDNr")?.InnerText ?? ""));
            idCount++;
        }
        idCount = 0;
        foreach (XmlNode itemI in stateContainer.projectData_Undo[0].SelectNodes("//FM/Preconditions/Precondition")!)
        {
            if (itemI.SelectSingleNode("IDNr")?.InnerText != idCount.ToString())
            {
                itemI.SelectSingleNode("IDNr")!.InnerText = idCount.ToString();
            }
            if (itemI.SelectSingleNode("@orphan") == null)
            {
                itemI.Attributes!.Append(stateContainer.projectData_Undo[0].CreateAttribute("orphan"));
            }
            itemI.SelectSingleNode("@orphan")!.Value = "true";
            stateContainer.aspectsList.Add(new Aspect("Precondition", idCount.ToString(), "true", itemI.SelectSingleNode("IDName")?.InnerText ?? "", itemI.SelectSingleNode("FunctionIDNr")?.InnerText ?? ""));
            idCount++;
        }
        idCount = 0;
        foreach (XmlNode itemI in stateContainer.projectData_Undo[0].SelectNodes("//FM/Resources/Resource")!)
        {
            if (itemI.SelectSingleNode("IDNr")?.InnerText != idCount.ToString())
            {
                itemI.SelectSingleNode("IDNr")!.InnerText = idCount.ToString();
            }
            if (itemI.SelectSingleNode("@orphan") == null)
            {
                itemI.Attributes!.Append(stateContainer.projectData_Undo[0].CreateAttribute("orphan"));
            }
            itemI.SelectSingleNode("@orphan")!.Value = "true";
            stateContainer.aspectsList.Add(new Aspect("Resource", idCount.ToString(), "true", itemI.SelectSingleNode("IDName")?.InnerText ?? "", itemI.SelectSingleNode("FunctionIDNr")?.InnerText ?? ""));
            idCount++;
        }
        idCount = 0;
        foreach (XmlNode itemI in stateContainer.projectData_Undo[0].SelectNodes("//FM/Controls/Control")!)
        {
            if (itemI.SelectSingleNode("IDNr")?.InnerText != idCount.ToString())
            {
                itemI.SelectSingleNode("IDNr")!.InnerText = idCount.ToString();
            }
            if (itemI.SelectSingleNode("@orphan") == null)
            {
                itemI.Attributes!.Append(stateContainer.projectData_Undo[0].CreateAttribute("orphan"));
            }
            itemI.SelectSingleNode("@orphan")!.Value = "true";
            stateContainer.aspectsList.Add(new Aspect("Control", idCount.ToString(), "true", itemI.SelectSingleNode("IDName")?.InnerText ?? "", itemI.SelectSingleNode("FunctionIDNr")?.InnerText ?? ""));
            idCount++;
        }
        idCount = 0;
        foreach (XmlNode itemI in stateContainer.projectData_Undo[0].SelectNodes("//FM/Times/Time")!)
        {
            if (itemI.SelectSingleNode("IDNr")?.InnerText != idCount.ToString())
            {
                itemI.SelectSingleNode("IDNr")!.InnerText = idCount.ToString();
            }
            if (itemI.SelectSingleNode("@orphan") == null)
            {
                itemI.Attributes!.Append(stateContainer.projectData_Undo[0].CreateAttribute("orphan"));
            }
            itemI.SelectSingleNode("@orphan")!.Value = "true";
            stateContainer.aspectsList.Add(new Aspect("Time", idCount.ToString(), "true", itemI.SelectSingleNode("IDName")?.InnerText ?? "", itemI.SelectSingleNode("FunctionIDNr")?.InnerText ?? ""));
            idCount++;
        }
        if (aspectsA.SelectSingleNode("@WebEnhanced")?.Value != "updated")
        {
            //while (aspectsA.FirstChild != null)
            //    aspectsA.RemoveChild(aspectsA.FirstChild);
            string[] dictArray = new string[4] { "", "", "", "" };
            idCount = 0;
            foreach (XmlNode itemO in stateContainer.projectData_Undo[0].SelectNodes("//FM/Outputs/Output")!)
            {
                if (itemO.SelectSingleNode("IDNr")?.InnerText != idCount.ToString())
                {
                    itemO.SelectSingleNode("IDNr")!.InnerText = idCount.ToString();
                }
                string isOutputOrphan = "true";
                dictArray[0] = itemO.SelectSingleNode("FunctionIDNr")?.InnerText ?? "";
                dictArray[1] = itemO.SelectSingleNode("IDName")?.InnerText ?? "";
                int iTo = stateContainer.aspectsList.Count;
                foreach (var aspect in stateContainer.aspectsList.FindAll(x => x.IDName == dictArray[1]))
                {
                    dictArray[2] = aspect.FunctionIDNr;
                    dictArray[3] = aspect.Type.Substring(0, 1);
                    stateContainer.reSetAspect(dictArray, double.Parse(render[$"{stateContainer.newFnStyle}:aspectX:O"]!), double.Parse(render[$"{stateContainer.newFnStyle}:aspectY:O"]!),
                        double.Parse(render[$"{stateContainer.newFnStyle}:aspectX:{dictArray[3]}"]!), double.Parse(render[$"{stateContainer.newFnStyle}:aspectY:{dictArray[3]}"]!),
                        int.Parse(render[$"{stateContainer.newFnStyle}:aspect-font-wrap"]!));
                    aspect.Orphan = "false";
                    stateContainer.projectData_Undo[0].SelectSingleNode($"//FM/{aspect.Type}s/{aspect.Type}[IDNr=\"{aspect.IDNr}\"]/@orphan")!.Value = "false";
                    isOutputOrphan = "false";
                }
                if (itemO.SelectSingleNode("@orphan") == null)
                {
                    itemO.Attributes!.Append(stateContainer.projectData_Undo[0].CreateAttribute("orphan"));
                }
                itemO.SelectSingleNode("@orphan")!.Value = isOutputOrphan;
                if (isOutputOrphan == "true")
                {
                    int orphans = Convert.ToInt32(stateContainer.projectData_Undo[0].SelectSingleNode($"//FM/Functions/Function[IDNr=\"{dictArray[0]}\"]/@orphans")?.Value);
                    orphans |= 1 << 1; //orphans &= ~(1 << 1);
                    stateContainer.projectData_Undo[0].SelectSingleNode($"//FM/Functions/Function[IDNr=\"{dictArray[0]}\"]/@orphans")!.Value = orphans.ToString();
                    stateContainer.functionList.Find(x => x.IDNr == dictArray[0])!.orphans = orphans;
                }
                stateContainer.outputsList.Add(new Aspect("Output", idCount.ToString(), isOutputOrphan, itemO.SelectSingleNode("IDName")?.InnerText ?? "", itemO.SelectSingleNode("FunctionIDNr")?.InnerText ?? ""));
                idCount++;
            }
            foreach (var aspect in stateContainer.aspectsList.FindAll(x => x.Orphan == "true"))
            {
                int orphans = Convert.ToInt32(stateContainer.projectData_Undo[0].SelectSingleNode($"//FM/Functions/Function[IDNr=\"{aspect.FunctionIDNr}\"]/@orphans")?.Value);
                switch (aspect.Type)
                { //orphans |= 1 << 0; //orphans &= ~(1 << 0); //if (1 >> 0) & 1 == 1;
                    case "Input": orphans |= 1 << 0; break;
                    case "Precondition": orphans |= 1 << 2; break;
                    case "Resource": orphans |= 1 << 3; break;
                    case "Control": orphans |= 1 << 4; break;
                    case "Time": orphans |= 1 << 5; break;
                }
                stateContainer.projectData_Undo[0].SelectSingleNode($"//FM/Functions/Function[IDNr=\"{aspect.FunctionIDNr}\"]/@orphans")!.Value = orphans.ToString();
                stateContainer.functionList.Find(x => x.IDNr == aspect.FunctionIDNr)!.orphans = orphans;
            }
            aspectsA.SelectSingleNode("@WebEnhanced")!.Value = "notupdated";
        }
        double tryZoomA = 1;
        double tryZoomF = 1;
        double tryZoomS = 1.5;
        double.TryParse(stateContainer.projectData_Undo[0].SelectSingleNode("//FM/Aspects/@scaleAspect")!.Value, out tryZoomA);
        double.TryParse(stateContainer.projectData_Undo[0].SelectSingleNode("//FM/Aspects/@scaleFunction")!.Value, out tryZoomF);
        double.TryParse(stateContainer.projectData_Undo[0].SelectSingleNode("//FM/Aspects/@scaleZoom")!.Value, out tryZoomS);
        stateContainer.tempZoomA = tryZoomA;
        stateContainer.tempZoomF = tryZoomF;
        stateContainer.scaleZoom = tryZoomS;
        stateContainer.canvasWidth = stateContainer.viewWidth * stateContainer.scaleZoom;
        stateContainer.canvasHeight = stateContainer.viewHeight * stateContainer.scaleZoom;
        newFnX = 20;
        newFnY = 20;
        isNewModel = false;
        stateContainer.fileLoaded = true;
        stateContainer.debugOutput = "";
        //spreadsheet?.InitialState();
        FocusElement("openFileBtn");
    }
    private void UnSelect(MouseEventArgs e)
    {
        if (stateContainer.selectedFn != "-1" && stateContainer.selectedFunction?.IDName == "")
        {
            stateContainer.defaultFnLabel();
        }
        if (stateContainer.selectedFunction is not null)
        {
            stateContainer.selectedFunction.fnClass = "fn-point";
        }
        if (stateContainer.selectedCoupling is not null)
        {
            stateContainer.selectedCoupling.aspectClass = "fn-point";
        }
        stateContainer.selectedFn = "-1";
        stateContainer.isDisabled = true;
        stateContainer.selectedLabel = "";
        stateContainer.fnName = "";
        stateContainer.touchAction = "auto";
        StateHasChanged();
        //if (spreadsheet is not null)
        //{
        //    await spreadsheet.UpdateState();
        //}
    }
    public async void ClearElement(string elementName)
    {
        await JSRuntime.InvokeVoidAsync("clearInput", elementName);
    }
    public async void FocusElement(string elementName)
    {
        await JSRuntime.InvokeVoidAsync("focusInput", elementName);
    }
    private void NextFn(KeyboardEventArgs e)
    {
        if (stateContainer.fileLoaded)
        {
            if (stateContainer.selectedFn != "-1" && stateContainer.selectedFunction?.IDName == "")
            {
                stateContainer.defaultFnLabel();
            }
            if (stateContainer.selectedFunction is not null)
            {
                stateContainer.selectedFunction.dragFn = false;
            }
            if (stateContainer.selectedCoupling is not null)
            {
                stateContainer.selectedCoupling.dragAspect = false;
                stateContainer.selectedCoupling.aspectClass = "fn-point";
                stateContainer.selectedLabel = "";
            }
            if (e.Key == "ArrowRight")
            {
                stateContainer.selectedFn = (int.Parse(stateContainer.selectedFn) + 1).ToString();
                if (stateContainer.selectedFunction is null)
                {
                    stateContainer.selectedFn = stateContainer.functionList.First().IDNr;
                }
                stateContainer.fnName = stateContainer.selectedFunction?.IDName ?? "";
                stateContainer.isDisabled = false;
                FocusElement("newFnButton");
            }
            else if (e.Key == "ArrowLeft")
            {
                stateContainer.selectedFn = (int.Parse(stateContainer.selectedFn) - 1).ToString();
                if (stateContainer.selectedFunction is null)
                {
                    stateContainer.selectedFn = stateContainer.functionList.Last().IDNr;
                }
                stateContainer.fnName = stateContainer.selectedFunction?.IDName ?? "";
                stateContainer.isDisabled = false;
                FocusElement("newFnButton");
            }
            else if (e.Code == "KeyI")
            {
                FocusElement("newIButton");
            }
            else if (e.Code == "KeyO")
            {
                FocusElement("newOButton");
            }
            else if (e.Code == "KeyP")
            {
                FocusElement("newPButton");
            }
            else if (e.Code == "KeyR")
            {
                FocusElement("newRButton");
            }
            else if (e.Code == "KeyT")
            {
                FocusElement("newTButton");
            }
            else if (e.Code == "KeyC")
            {
                FocusElement("newCButton");
            }
            else if (e.Key == "+")
            {
                FocusElement("newFnButton");
            }
        }
    }
    private async Task Restore()
    {
        try
        {
            stateContainer.isBackup = await localStorage.GetItemAsync<bool>("isBackup");
            if (stateContainer.isBackup)
            {
                stateContainer.debugOutput = "Backup loading ...";
                stateContainer.fileLoaded = false;
                stateContainer.viewWidth = 0;
                stateContainer.viewHeight = 0;
                stateContainer.undoIndex = 0;
                stateContainer.projectData_Undo = new XmlDocument[stateContainer.undoLength];
                stateContainer.projectData_Undo[0] = new XmlDocument();
                stateContainer.projectData_Undo[0].LoadXml(await localStorage.GetItemAsync<string>("backupData"));
                stateContainer.fileName = await localStorage.GetItemAsync<string>("backupFileName");
                stateContainer.inputDropStatus = "file-input-zone-hide";
                stateContainer.isBackup = false;
                FileIsLoaded();
                await localStorage.SetItemAsync("isBackup", false);
                StateHasChanged();
            }
        }
        catch
        {
            stateContainer.debugOutput = "";
        }
    }
}