@inject StateContainer stateContainer
@inject IJSRuntime JSRuntime

<div id="myModal" class="modal fade show" style="display:block" aria-modal="true" role="dialog" tabindex="100" @onkeydown=checkforEsc @onclick=clickOut>
    <div class="modal-dialog modal-dialog-centered modal-fmi" @onclick=clickNothing @onclick:stopPropagation>
        <div class="modal-content">
            <div class="modal-header sticky-top bg-white p-0 pl-1 align-items-center">
                FMI LOG
                <div class="float-right">
                    <button class="btn btn-menu oi oi-file" style="top:0" @onclick=printFMILog />
                    <button type="button" class="close m-0 pt-1 pb-1 pl-3 pr-3" @onclick="@(() => OnClose.InvokeAsync(false))">&times;</button>
                </div>
            </div>
            <div class="modal-body p-1">
                @stateContainer.fmiMessage
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter] public EventCallback<bool> OnClose { get; set; }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            FocusElement("myModal");
        }
    }
    private async void clickOut(MouseEventArgs e)
    {
        await OnClose.InvokeAsync(false);
    }
    private void clickNothing(MouseEventArgs e)
    {
    }
    private async void checkforEsc(KeyboardEventArgs e)
    {
        if (e.Key == "Escape")
        {
            await OnClose.InvokeAsync(false);
        }
        else if (e.Key == "Enter")
        {
            await OnClose.InvokeAsync(false);
        }
    }
    public async void FocusElement(string elementName)
    {
        try
        {
            await JSRuntime.InvokeVoidAsync("focusInput", elementName);
        }
        catch
        {
        }
    }
    private async void printFMILog()
    {
        await JSRuntime.InvokeAsync<object>(
        "FileSaveAs",
        stateContainer.fileName.Replace(".xfmv","-fmilog.txt"),
        stateContainer.fmiMessage
    );
    }
}